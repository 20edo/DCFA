% Function that gives the expression of the aerodynamic stiffness matrix of
% the element 
%%
% DCFA swept wing assignement
%
% Teamwork
% Team members: Venti Edoardo         944421
%               Zemello Matteo        942003
%               Zucchelli Umberto     952952
%
%
%
function el = el_Ka_assembly(b,el,lambda,alpha,dx)

L=el.L;
c = el.sc.Ymax - el.sc.Ymin ;  % chord
e = -el.sc.yo - 1/4*c; % e -> distance between the shear center (elastic axis) and AC

CLa = el.sc.CLa;


if dx == 1
Ka = [[ 0, 0,                                                                           0,                                                                               0,                                                                              0, 0, 0, 0,                                                                             0,                                                                             0,                                                                              0, 0]
[ 0, 0,                                                                           0,                                                                               0,                                                                              0, 0, 0, 0,                                                                             0,                                                                             0,                                                                              0, 0]
[ 0, 0, (CLa*c*sin(2*lambda))/4 - (6*CLa*c*e*cos(lambda)*(cos(lambda)^2 - 1))/(5*L),      (7*CLa*L*c*cos(lambda)^2)/20 - (CLa*c*e*sin(lambda)*(sin(lambda)^2 - 1))/2,      (CLa*L*c*sin(2*lambda))/20 + (CLa*c*e*cos(lambda)*(cos(lambda)^2 - 1))/10, 0, 0, 0,   (6*CLa*c*e*cos(lambda)*(cos(lambda)^2 - 1))/(5*L) - (CLa*c*sin(2*lambda))/4,    (3*CLa*L*c*cos(lambda)^2)/20 - (CLa*c*e*sin(lambda)*(sin(lambda)^2 - 1))/2,      (CLa*c*e*cos(lambda)*(cos(lambda)^2 - 1))/10 - (CLa*L*c*sin(2*lambda))/20, 0]
[ 0, 0,                                -(CLa*c*e*sin(lambda)*(sin(lambda)^2 - 1))/2,                                                     (CLa*L*c*e*cos(lambda)^3)/3,                                -(CLa*L*c*e*sin(lambda)*(sin(lambda)^2 - 1))/12, 0, 0, 0,                                   (CLa*c*e*sin(lambda)*(sin(lambda)^2 - 1))/2,                                                   (CLa*L*c*e*cos(lambda)^3)/6,                                 (CLa*L*c*e*sin(lambda)*(sin(lambda)^2 - 1))/12, 0]
[ 0, 0,   (CLa*c*e*cos(lambda)*(cos(lambda)^2 - 1))/10 - (CLa*L*c*sin(2*lambda))/20, - (CLa*L^2*c*cos(lambda)^2)/20 - (CLa*L*c*e*sin(lambda)*(sin(lambda)^2 - 1))/12,                              -(2*CLa*L*c*e*cos(lambda)*(cos(lambda)^2 - 1))/15, 0, 0, 0,     (CLa*L*c*sin(2*lambda))/20 - (CLa*c*e*cos(lambda)*(cos(lambda)^2 - 1))/10, (CLa*L*c*e*sin(lambda)*(sin(lambda)^2 - 1))/12 - (CLa*L^2*c*cos(lambda)^2)/30, (CLa*c*sin(2*lambda)*L^2)/120 + (CLa*c*e*cos(lambda)*(cos(lambda)^2 - 1)*L)/30, 0]
[ 0, 0,                                                                           0,                                                                               0,                                                                              0, 0, 0, 0,                                                                             0,                                                                             0,                                                                              0, 0]
[ 0, 0,                                                                           0,                                                                               0,                                                                              0, 0, 0, 0,                                                                             0,                                                                             0,                                                                              0, 0]
[ 0, 0,                                                                           0,                                                                               0,                                                                              0, 0, 0, 0,                                                                             0,                                                                             0,                                                                              0, 0]
[ 0, 0, (CLa*c*sin(2*lambda))/4 + (6*CLa*c*e*cos(lambda)*(cos(lambda)^2 - 1))/(5*L),      (3*CLa*L*c*cos(lambda)^2)/20 + (CLa*c*e*sin(lambda)*(sin(lambda)^2 - 1))/2,    - (CLa*L*c*sin(2*lambda))/20 - (CLa*c*e*cos(lambda)*(cos(lambda)^2 - 1))/10, 0, 0, 0, - (CLa*c*sin(2*lambda))/4 - (6*CLa*c*e*cos(lambda)*(cos(lambda)^2 - 1))/(5*L),    (7*CLa*L*c*cos(lambda)^2)/20 + (CLa*c*e*sin(lambda)*(sin(lambda)^2 - 1))/2,      (CLa*L*c*sin(2*lambda))/20 - (CLa*c*e*cos(lambda)*(cos(lambda)^2 - 1))/10, 0]
[ 0, 0,                                -(CLa*c*e*sin(lambda)*(sin(lambda)^2 - 1))/2,                                                     (CLa*L*c*e*cos(lambda)^3)/6,                                 (CLa*L*c*e*sin(lambda)*(sin(lambda)^2 - 1))/12, 0, 0, 0,                                   (CLa*c*e*sin(lambda)*(sin(lambda)^2 - 1))/2,                                                   (CLa*L*c*e*cos(lambda)^3)/3,                                -(CLa*L*c*e*sin(lambda)*(sin(lambda)^2 - 1))/12, 0]
[ 0, 0,   (CLa*L*c*sin(2*lambda))/20 + (CLa*c*e*cos(lambda)*(cos(lambda)^2 - 1))/10,   (CLa*L^2*c*cos(lambda)^2)/30 + (CLa*L*c*e*sin(lambda)*(sin(lambda)^2 - 1))/12, (CLa*L*c*e*cos(lambda)*(cos(lambda)^2 - 1))/30 - (CLa*L^2*c*sin(2*lambda))/120, 0, 0, 0,   - (CLa*L*c*sin(2*lambda))/20 - (CLa*c*e*cos(lambda)*(cos(lambda)^2 - 1))/10, (CLa*L^2*c*cos(lambda)^2)/20 - (CLa*L*c*e*sin(lambda)*(sin(lambda)^2 - 1))/12,                              -(2*CLa*L*c*e*cos(lambda)*(cos(lambda)^2 - 1))/15, 0]
[ 0, 0,                                                                           0,                                                                               0,                                                                              0, 0, 0, 0,                                                                             0,                                                                             0,                                                                              0, 0]];
elseif dx == -1
Ka = [[ 0, 0,                                                                           0,                                                                               0,                                                                              0, 0, 0, 0,                                                                             0,                                                                             0,                                                                              0, 0]
[ 0, 0,                                                                           0,                                                                               0,                                                                              0, 0, 0, 0,                                                                             0,                                                                             0,                                                                              0, 0]
[ 0, 0, (CLa*c*sin(2*lambda))/4 - (6*CLa*c*e*cos(lambda)*(cos(lambda)^2 - 1))/(5*L),      (CLa*c*e*sin(lambda)*(sin(lambda)^2 - 1))/2 - (7*CLa*L*c*cos(lambda)^2)/20,      (CLa*L*c*sin(2*lambda))/20 + (CLa*c*e*cos(lambda)*(cos(lambda)^2 - 1))/10, 0, 0, 0,   (6*CLa*c*e*cos(lambda)*(cos(lambda)^2 - 1))/(5*L) - (CLa*c*sin(2*lambda))/4,    (CLa*c*e*sin(lambda)*(sin(lambda)^2 - 1))/2 - (3*CLa*L*c*cos(lambda)^2)/20,      (CLa*c*e*cos(lambda)*(cos(lambda)^2 - 1))/10 - (CLa*L*c*sin(2*lambda))/20, 0]
[ 0, 0,                                 (CLa*c*e*sin(lambda)*(sin(lambda)^2 - 1))/2,                                                     (CLa*L*c*e*cos(lambda)^3)/3,                                 (CLa*L*c*e*sin(lambda)*(sin(lambda)^2 - 1))/12, 0, 0, 0,                                  -(CLa*c*e*sin(lambda)*(sin(lambda)^2 - 1))/2,                                                   (CLa*L*c*e*cos(lambda)^3)/6,                                -(CLa*L*c*e*sin(lambda)*(sin(lambda)^2 - 1))/12, 0]
[ 0, 0,   (CLa*c*e*cos(lambda)*(cos(lambda)^2 - 1))/10 - (CLa*L*c*sin(2*lambda))/20,   (CLa*L^2*c*cos(lambda)^2)/20 + (CLa*L*c*e*sin(lambda)*(sin(lambda)^2 - 1))/12,                              -(2*CLa*L*c*e*cos(lambda)*(cos(lambda)^2 - 1))/15, 0, 0, 0,     (CLa*L*c*sin(2*lambda))/20 - (CLa*c*e*cos(lambda)*(cos(lambda)^2 - 1))/10, (CLa*L^2*c*cos(lambda)^2)/30 - (CLa*L*c*e*sin(lambda)*(sin(lambda)^2 - 1))/12, (CLa*c*sin(2*lambda)*L^2)/120 + (CLa*c*e*cos(lambda)*(cos(lambda)^2 - 1)*L)/30, 0]
[ 0, 0,                                                                           0,                                                                               0,                                                                              0, 0, 0, 0,                                                                             0,                                                                             0,                                                                              0, 0]
[ 0, 0,                                                                           0,                                                                               0,                                                                              0, 0, 0, 0,                                                                             0,                                                                             0,                                                                              0, 0]
[ 0, 0,                                                                           0,                                                                               0,                                                                              0, 0, 0, 0,                                                                             0,                                                                             0,                                                                              0, 0]
[ 0, 0, (CLa*c*sin(2*lambda))/4 + (6*CLa*c*e*cos(lambda)*(cos(lambda)^2 - 1))/(5*L),    - (3*CLa*L*c*cos(lambda)^2)/20 - (CLa*c*e*sin(lambda)*(sin(lambda)^2 - 1))/2,    - (CLa*L*c*sin(2*lambda))/20 - (CLa*c*e*cos(lambda)*(cos(lambda)^2 - 1))/10, 0, 0, 0, - (CLa*c*sin(2*lambda))/4 - (6*CLa*c*e*cos(lambda)*(cos(lambda)^2 - 1))/(5*L),  - (7*CLa*L*c*cos(lambda)^2)/20 - (CLa*c*e*sin(lambda)*(sin(lambda)^2 - 1))/2,      (CLa*L*c*sin(2*lambda))/20 - (CLa*c*e*cos(lambda)*(cos(lambda)^2 - 1))/10, 0]
[ 0, 0,                                 (CLa*c*e*sin(lambda)*(sin(lambda)^2 - 1))/2,                                                     (CLa*L*c*e*cos(lambda)^3)/6,                                -(CLa*L*c*e*sin(lambda)*(sin(lambda)^2 - 1))/12, 0, 0, 0,                                  -(CLa*c*e*sin(lambda)*(sin(lambda)^2 - 1))/2,                                                   (CLa*L*c*e*cos(lambda)^3)/3,                                 (CLa*L*c*e*sin(lambda)*(sin(lambda)^2 - 1))/12, 0]
[ 0, 0,   (CLa*L*c*sin(2*lambda))/20 + (CLa*c*e*cos(lambda)*(cos(lambda)^2 - 1))/10, - (CLa*L^2*c*cos(lambda)^2)/30 - (CLa*L*c*e*sin(lambda)*(sin(lambda)^2 - 1))/12, (CLa*L*c*e*cos(lambda)*(cos(lambda)^2 - 1))/30 - (CLa*L^2*c*sin(2*lambda))/120, 0, 0, 0,   - (CLa*L*c*sin(2*lambda))/20 - (CLa*c*e*cos(lambda)*(cos(lambda)^2 - 1))/10, (CLa*L*c*e*sin(lambda)*(sin(lambda)^2 - 1))/12 - (CLa*L^2*c*cos(lambda)^2)/20,                              -(2*CLa*L*c*e*cos(lambda)*(cos(lambda)^2 - 1))/15, 0]
[ 0, 0,                                                                           0,                                                                               0,                                                                              0, 0, 0, 0,                                                                             0,                                                                             0,                                                                              0, 0]];
end



el.Ka=sparse(Ka);

el.Ka=Ka;

end


